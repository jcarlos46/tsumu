-- stdlib.tsu

-- DUPLICAÇÃO E MANIPULAÇÃO DE PILHA
(dup)   (0 pick)       def
(2dup)  (dup dup)      def
(over)  (dupd swap)    def
(2over) (over over)    def
(2rot)  (rot rot)      def
(2pop)  (pop pop)      def

-- OPERAÇÕES LÓGICAS
(eq)   (=)         def
(not)  (0 =)       def
(!=)   (= not)     def
(and)  (* not not) def
(or)   (+ not not) def
(xor)  (= not)     def

-- Condicionais
(if)   (cond apply) def
(when) (() if)      def

-- Operações Padrão
(dip)  (swap quote compose call) def
(dipd) (swap (dip) dip)    def
(dupd) ((dup) dip)         def
(rol)  (swap (swap) dip)   def
(-rol) ((swap) dip swap)   def

-- Eval alias ( expr -- expr-return... )
(call)  (eval) def
(apply) (eval) def

-- printf (n... -- )
(printf) ((dup 0 >) (swap emit 1 - ) while) def

-- Factorial (n -- n')
(fact) (dup 1 > (dup 1 - fact *) (pop 1) if) def
(!) (fact) def
-- 5 !  print  -- 120

-- Power (a b -- a^b)
(**) ((dup 1 >) (-> dup <- 1 -) while pop len (*) reduce) def
(^) (**) def
-- 2 4 ** -- 16
-- 5 5 ^ -- 3125


-- Max (a b -- n)
(max) (2over > (pop) (swap pop) if) def
-- 11 10 max ps  -- [11]

-- Min (a b -- n)
(min) (2over < (pop) (swap pop) if) def
-- 11 10 min ps  -- [10]

-- Absolute (n -- n')
(abs) (dup 0 < (-1 *) if) def
-- -4 abs ps clear -- [4]

-- Odd (n -- n')
(odd?) (2 %) def

-- Even (n -- n')
(even?) (odd? not) def

-- Mod (n -- n')
(mod) (%) def


-- Clean all main stack -- ( seq -- )
(clear) ((len 0 >) (pop) while) def

-- Variable definiiton -- (value name -- )
(var) (swap def) def

-- Stash
-- Stash manipulation aliases
(->) (stash>) def
(<-) (<stash) def

-- List manipulation
(list)
  ([] (len 1 >) (cons) while)
def

(unlist)
  ((size 0 >) (uncons) while pop)
def

(head)
  (uncons dupd swap (cons) dip)
def

(tail) (uncons swap pop) def

(reverse)
  ([] swap
    (size 0 >)
      (uncons (swap cons) dip) while pop)
def

-- TODO: criar versões para STRING e EXPR
(concat)
  (swap reverse
    (size 0 >)
      (uncons (swap cons) dip) while pop)
def

(map)
  (stash> [] swap
    (size 0 >)
      (uncons <stash dup stash> dip (swap cons) dip) while
  <stash 2pop reverse)
def

(filter)
  (stash> [] swap
    (size 0 >)
      (uncons dupd <stash dup stash> dip 
        swap (swap cons) (pop) cond dip) while
  <stash 2pop reverse)
def

(fold)
  (stash> uncons
    (size 0 >)
      (uncons <stash dup stash> dip) while
  <stash 2pop)
def