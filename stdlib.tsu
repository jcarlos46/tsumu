-- stdlib.tsu

-- DUPLICAÇÃO E MANIPULAÇÃO DE PILHA
(dup)   (0 pick)       def
(2dup)  (dup dup)      def
(over)  (dupd swap)    def
(2over) (over over)    def
(2rot)  (rot rot)      def
(2pop)  (pop pop)      def

-- OPERAÇÕES LÓGICAS
(eq)   (=)         def
(not)  (0 =)       def
(!=)   (= not)     def
(and)  (* not not) def
(or)   (+ not not) def
(xor)  (= not)     def

-- Condicionais
(if)   (cond apply) def
(when) (() if)      def

-- Operações Padrão
-- (dip)  (swap quote compose call) def
(dipd) (swap (dip) dip)    def
(dupd) ((dup) dip)         def
(rol)  (swap (swap) dip)   def
(-rol) ((swap) dip swap)   def

-- Eval alias ( expr -- expr-return... )
(call)  (eval) def
(apply) (eval) def

-- Factorial (n -- n')
(fact) (dup 1 > (dup 1 - fact *) (pop 1) if) def
(!) (fact) def
-- 5 !  print  -- 120

-- Odd (n -- n')
(odd?) (2 %) def

-- Even (n -- n')
(even?) (odd? not) def

-- Mod (n -- n')
(mod) (%) def


-- Clean all main stack -- ( seq -- )
(clear) ((len 0 >) (pop) while) def

-- Variable definiiton -- (value name -- )
(var) (swap def) def

-- Stash
-- Stash manipulation aliases
(->) (stash>) def
(<-) (<stash) def

-- List manipulation
-- ( seq -- list )
(list)
  ([] (len 1 >) (cons) while)
def

-- ( list -- seq )
(unlist)
  ((size 0 >) (uncons) while pop)
def

-- ( list -- list n )
(head)
  (uncons dupd swap (cons) dip)
def

-- ( list -- tail )
(tail) (uncons swap pop) def

-- ( list -- list )
(reverse)
  ([] swap
    (size 0 >)
      (uncons (swap cons) dip) while pop)
def

-- ( list list -- list )
-- TODO: criar versões para STRING e EXPR
(concat)
  (swap reverse
    (size 0 >)
      (uncons (swap cons) dip) while pop)
def

-- ( list expr -- list )
(map)
  (stash> [] swap
    (size 0 >)
      (uncons <stash dup stash> dip (swap cons) dip)
    while
   <stash 2pop reverse)
def

-- ( list expr -- list )
(filter)
  (stash> [] swap
    (size 0 >)
      (uncons dupd <stash dup stash> dip 
       swap (swap cons) (pop) cond dip)
    while
   <stash 2pop reverse)
def

-- ( list expr -- n )
(fold)
  (stash> uncons
    (size 0 >)
      (uncons <stash dup stash> dip) while
  <stash 2pop)
def

(number?) (type? "NUMBER" =) def
(string?) (type? "STRING" =) def
(list?)   (type? "LIST"   =) def

-- FFI - Foreign Function Interface
-- ( type args_count lua-func func-name -- )
"STRING" 2 "table.concat" (join)  ffi
"VOID"   1 "print"        (print) ffi
"STRING" 1 "trim"         (trim)  ffi
-- IO
"VOID"   1 "io.write" (io-write) ffi
"STRING" 0 "io.read"  (io-read)  ffi
-- OS
"NUMBER" 0 "os.time" (os-time) ffi
"NUMBER" 0 "os.clock" (os-clock) ffi
-- MATH
"NUMBER" 1 "math.abs" (abs) ffi
"NUMBER" 2 "math.pow" (pow) ffi
"NUMBER" 2 "math.min" (min) ffi
"NUMBER" 2 "math.max" (max) ffi
"VOID"   1 "math.randomseed" (math-randomseed) ffi
"NUMBER" 1 "math.random" (math-random) ffi

-- TODO: create C FFI
-- Example:
-- "NUMBER" 2
-- "double pow(double base, double expoente);"
-- (pow) ffic