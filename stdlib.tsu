-- stdlib.tsu

-- DUPLICAÇÃO E MANIPULAÇÃO DE PILHA
(dup)   (0 pick)       def
(2dup)  (dup dup)      def
(over)  (1 pick)       def
(2over) (over over)    def
(2rot)  (rot rot)      def
(2pop)  (pop pop)      def

(swap)  (0 pick 2 pick -> -> pop pop <- <-) def

-- OPERAÇÕES LÓGICAS
(eq)   (=)           def
(not)  (0 =)         def
(!=)   (= not)       def
(and)  (* not not)   def
(or)   (+ not not)   def
(xor)  (= not) def

-- Print with new line ( -- )
-- (print) (io-write "\\n" io-write) def

(emit) (number-ascii io-write) def

-- Print stack alias ( -- )
(ps) (print-stack) def

-- Eval alias ( expr -- expr-return... )
(call) (eval) def

-- printf (n... -- )
(printf) ((dup 0 >) (swap emit 1 - ) while) def


-- Factorial (n -- n')
(fact) (dup 1 > (dup 1 - fact *) (pop 1) ifelse) def
(!) (fact) def
-- 5 !  print  -- 120

-- Power (a b -- a^b)
(**) ((dup 1 >) (-> dup <- 1 -) while pop len (*) reduce) def
(^) (**) def
-- 2 4 ** -- 16
-- 5 5 ^ -- 3125


-- Max (a b -- n)
(max) (2over > (pop) (swap pop) ifelse) def
-- 11 10 max ps  -- [11]

-- Min (a b -- n)
(min) (2over < (pop) (swap pop) ifelse) def
-- 11 10 min ps  -- [10]


-- Absolute (n -- n')
(abs) (dup 0 < (-1 *) if) def
-- -4 abs ps clear -- [4]


-- Odd (n -- n')
(odd?) (2 %) def

-- Even (n -- n')
(even?) (odd? not) def

-- Mod (n -- n')
(mod) (%) def


-- Reduce -- (seq.. expr -- expr-result?)
(reduce) (len 1 - reduce-body) def

-- Reduce-N -- (seq.. lenght expr -- expr-result?)
(reduce-n) (swap reduce-body) def

-- Reduce body
(reduce-body)
((dup 1 >) (-> dup -> call <- <- 1 -) while 2pop)
def

-- Map -- (seq.. expr -- new-seq)
(map) (len 1 - map-body) def
-- Map body
(map-body)
((dup 0 >) (-> dup -> call rot <- <- 1 -) while 2pop)
def

-- Filter -- (seq.. expr -- new-seq)
(filter)
 (len 1 - (dup 0 >)
  (-> dup -> over swap call (rot) (pop) ifelse <- <- 1 -)
 while 2pop)
def

-- Revert -- (seq -- new-seq)
(revert) (
 len 2 - dup rot (dup 0 >) (swap -> 1 -) while pop
 swap -rot (dup 0 >) (<- swap 1 - -> rot <-) while pop
) def

-- Clean all main stack (n.. -- )
-- (clear) (len (dup 0 >) (-> pop <- 1 -) while pop)  def

